---
- name: Ensure PostgreSQL users are present.
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
  with_items: "{{ postgresql_users }}"
  #no_log: "{{ postgres_users_no_log }}"
  become: true
  become_user: "{{ postgresql_user }}"
  when:
    - zabbix_database_sqlload
    - zabbix_database_creation

- name: Ensure PostgreSQL databases are present.
  postgresql_db:
    name: "{{ item.name }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_databases }}"
  become: true
  become_user: "{{ postgresql_user }}"
  when:
    - zabbix_database_sqlload
    - zabbix_database_creation

- name: "Get the file for schema.sql"
  shell: ls -1 {{ datafiles_path }}/create.sql.gz
  changed_when: False
  when:
    - zabbix_database_sqlload
  register: ls_output_create

- name: "Get the file for timescale.sql"
  shell: ls -1 {{ datafiles_path }}/timescaledb.sql.gz
  changed_when: False
  when:
    - zabbix_database_sqlload
  register: ls_output_time

- name: "PostgreSQL | Importing schema file"
  shell: >
    zcat "{{ ls_output_create.stdout }}" | psql -h "{{ zbx_database_address }}" -U "{{ zbx_database_user }}" zabbix
  #ignore_errors: true

- name: Executando timescaledb-tune e timescaledb.sql
  shell: |
   echo "CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;" | psql -h "{{ zbx_database_address }}" -U "{{ postgresql_user }}" zabbix
   zcat "{{ ls_output_time.stdout }}" | psql -h "{{ zbx_database_address }}" -U "{{ zbx_database_user }}" zabbix
  register: output

- debug:
    msg: '{{ output.stdout }}'